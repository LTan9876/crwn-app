{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; //public key so firebase knows to look for this project\n\nconst config = {\n  apiKey: \"AIzaSyD3z3qFzlQ54DUWk8JuVmZB0iY9F6H4jXI\",\n  authDomain: \"crwn-db-38b37.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-38b37.firebaseio.com\",\n  projectId: \"crwn-db-38b37\",\n  storageBucket: \"crwn-db-38b37.appspot.com\",\n  messagingSenderId: \"908873493939\",\n  appId: \"1:908873493939:web:f78f45b653cb16973c2fc6\",\n  measurementId: \"G-30FZQRQR57\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); //methods provided by firebase\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //use google as auth of choice\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); //pop up window lets user choose which account to sign in as\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/lilytan/Documents/personalprojects/crwn-app/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP,C,CAEA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AACb;AACD;;AAED,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AACHC,QAAAA,KADG;AACIC,QAAAA,SADJ;AACe,WAAGV;AADlB,OAAZ,CAAN;AAGD,KAJD,CAIE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AACD,SAAOf,OAAP;AACD,CApBM;AAsBPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB,E,CAEA;;AACA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n//public key so firebase knows to look for this project\nconst config = {\n  apiKey: \"AIzaSyD3z3qFzlQ54DUWk8JuVmZB0iY9F6H4jXI\",\n  authDomain: \"crwn-db-38b37.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-38b37.firebaseio.com\",\n  projectId: \"crwn-db-38b37\",\n  storageBucket: \"crwn-db-38b37.appspot.com\",\n  messagingSenderId: \"908873493939\",\n  appId: \"1:908873493939:web:f78f45b653cb16973c2fc6\",\n  measurementId: \"G-30FZQRQR57\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return\n  }\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n  const snapShot = await userRef.get()\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date()\n    try {\n      await userRef.set({\n        displayName, email, createdAt, ...additionalData\n      })\n    } catch (error) {\n      console.log('error creating user', error.message)\n    }\n  }\n  return userRef\n}\n\nfirebase.initializeApp(config)\n\n//methods provided by firebase\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\n//use google as auth of choice\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({ prompt: 'select_account' })\n\n//pop up window lets user choose which account to sign in as\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}